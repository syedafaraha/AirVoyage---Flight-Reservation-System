package airvoyage;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

// Interface for displaying details
interface Displayable {
    void displayDetails();
}

// Person class (Parent)
abstract class Person implements Displayable {
    private String name;
    private String email;
    private String phoneNumber;

    // Constructor
    public Person(String name, String email, String phoneNumber) {
        if (!isValidEmail(email)) {
            throw new IllegalArgumentException("Invalid email format.");
        }
        if (!isValidPhoneNumber(phoneNumber)) {
            throw new IllegalArgumentException("Invalid phone number format.");
        }
        this.name = name;
        this.email = email;
        this.phoneNumber = phoneNumber;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    private boolean isValidEmail(String email) {
        String emailRegex = "^[A-Za-z0-9+_.-]+@(.+)$";
        return email.matches(emailRegex);
    }

    private boolean isValidPhoneNumber(String phoneNumber) {
        String phoneRegex = "\\d+";
        return phoneNumber.matches(phoneRegex);
    }

    @Override
    public void displayDetails() {
        System.out.println("Name: " + name);
        System.out.println("Email: " + email);
        System.out.println("Phone Number: " + phoneNumber);
    }
}

// Passenger class (derived from Person class)
// Passenger class represents a passenger with their details
class Passenger extends Person {
    // Constructor
    public Passenger(String name, String email, String phoneNumber) {
        super(name, email, phoneNumber);
    }

    @Override
    public void displayDetails() {
        System.out.println("Passenger Details:");
        super.displayDetails();
    }
}

// Admin class (derived from Person class)
// Admin class represents an admin with basic details
class Admin extends Person {
    private String username;
    private String password;

    // Constructor
    public Admin(String name, String email, String phoneNumber, String username, String password) {
        super(name, email, phoneNumber);
        this.username = username;
        this.password = password;
    }

    public String getUsername() {
        return username;
    }

    public boolean authenticate(String password) {
        return this.password.equals(password);
    }

    @Override
    public void displayDetails() {
        System.out.println("Admin Details:");
        super.displayDetails();
        System.out.println("Username: " + username);
    }
}

// Flight class represents a flight with its details
class Flight implements Displayable {
    private String airline;
    private String flightNumber;
    private String departureTime;
    private String date; // New date attribute
    private int totalSeats;
    private int availableSeats;

    // Constructor
    public Flight(String airline, String flightNumber, String departureTime, String date, int totalSeats) {
        this.airline = airline;
        this.flightNumber = flightNumber;
        this.departureTime = departureTime;
        this.date = date; // Initialize date
        this.totalSeats = totalSeats;
        this.availableSeats = totalSeats;
    }

    public String getAirline() {
        return airline;
    }

    public String getFlightNumber() {
        return flightNumber;
    }

    public String getDepartureTime() {
        return departureTime;
    }

    public String getDate() { // Getter for date
        return date;
    }

    public int getTotalSeats() {
        return totalSeats;
    }

    public int getAvailableSeats() {
        return availableSeats;
    }

    public void bookSeats(int numSeats) throws Exception {
        if (numSeats <= availableSeats) {
            availableSeats -= numSeats;
            System.out.println(numSeats + " seat(s) booked successfully on " + airline + " flight " + flightNumber);
        } else {
            throw new Exception("Not enough seats available on " + airline + " flight " + flightNumber);
        }
    }

    @Override
    public void displayDetails() {
        System.out.println("Airline: " + airline);
        System.out.println("Flight Number: " + flightNumber);
        System.out.println("Departure Time: " + departureTime);
        System.out.println("Date: " + date); // Display date
        System.out.println("Total Seats: " + totalSeats);
        System.out.println("Available Seats: " + availableSeats);
    }
}


// FlightSearch class manages the search and display of available flights
class FlightSearch {
    private FlightManager flightManager;

    // Constructor
    public FlightSearch(FlightManager flightManager) {
        this.flightManager = flightManager;
    }

    public void searchFlights(String date, String airline) { // Update search method signature
        List<Flight> flights = flightManager.getAllFlights();
        for (Flight flight : flights) {
            if (flight.getDate().equals(date) && flight.getAirline().equals(airline)) { // Search by date and airline
                flight.displayDetails();
                System.out.println("-----------");
            }
        }
    }

    public void viewAvailableFlights() {
        List<Flight> flights = flightManager.getAllFlights();
        for (Flight flight : flights) {
            flight.displayDetails();
            System.out.println("-----------");
        }
    }

    public Flight getFlightByFlightNumber(String flightNumber) throws Exception {
        List<Flight> flights = flightManager.getAllFlights();
        for (Flight flight : flights) {
            if (flight.getFlightNumber().equals(flightNumber)) {
                return flight;
            }
        }
        throw new Exception("Flight not found with flight number " + flightNumber);
    }
}


// FlightManager class manages the flights and provides methods to add, edit, and delete flights
class FlightManager {
    private List<Flight> flights;

    // Constructor
    public FlightManager() {
        flights = new ArrayList<>();
        // Initializing flights list with sample flights
        flights.add(new Flight("Airline1", "FL001", "09:00", "2024-05-20", 50));
        flights.add(new Flight("Airline2", "FL002", "11:00", "2024-05-21", 40));
        flights.add(new Flight("Airline3", "FL003", "13:00", "2024-05-22", 60));
    }

    public void addFlight(Flight flight) {
        flights.add(flight);
        System.out.println("Flight added successfully.");
    }

    public void editFlight(String flightNumber, String newDepartureTime, String newDate, int newTotalSeats) {
        for (Flight flight : flights) {
            if (flight.getFlightNumber().equals(flightNumber)) {
                flights.set(flights.indexOf(flight), new Flight(flight.getAirline(), flightNumber, newDepartureTime, newDate, newTotalSeats));
                System.out.println("Flight details updated successfully.");
                return;
            }
        }
        System.out.println("Flight not found with flight number " + flightNumber);
    }

    public void deleteFlight(String flightNumber) {
        for (Flight flight : flights) {
            if (flight.getFlightNumber().equals(flightNumber)) {
                flights.remove(flight);
                System.out.println("Flight deleted successfully.");
                return;
            }
        }
        System.out.println("Flight not found with flight number " + flightNumber);
    }

    public List<String> getAirlines() {
        List<String> airlines = new ArrayList<>();
        for (Flight flight : flights) {
            if (!airlines.contains(flight.getAirline())) {
                airlines.add(flight.getAirline());
            }
        }
        return airlines;
    }

    public List<Flight> getFlightsByAirline(String airline) {
        List<Flight> airlineFlights = new ArrayList<>();
        for (Flight flight : flights) {
            if (flight.getAirline().equals(airline)) {
                airlineFlights.add(flight);
            }
        }
        return airlineFlights;
    }
    
    public List<Flight> getAllFlights() {
        return flights;
    }
}


// Reservation class represents a reservation with its details
class Reservation implements Displayable {
    private static int reservationIdCounter = 1;
    private int reservationId;
    private Flight flight;
    private Passenger passenger;
    private int numSeats;

    // Constructor
    public Reservation(Flight flight, Passenger passenger, int numSeats) {
        this.reservationId = reservationIdCounter++;
        this.flight = flight;
        this.passenger = passenger;
        this.numSeats = numSeats;
    }

    public int getReservationId() {
        return reservationId;
    }

    public Flight getFlight() {
        return flight;
    }

    public Passenger getPassenger() {
        return passenger;
    }

    public int getNumSeats() {
        return numSeats;
    }

    @Override
    public void displayDetails() {
        System.out.println("Reservation ID: " + reservationId);
        System.out.println("Flight Details:");
        flight.displayDetails();
        System.out.println("Passenger Details:");
        passenger.displayDetails();
        System.out.println("Number of Seats: " + numSeats);
    }
}

// ReservationManager class manages the creation and display of reservations
class ReservationManager {
    private List<Reservation> reservations;

    // Constructor
    public ReservationManager() {
        reservations = new ArrayList<>();
    }

    public void makeReservation(Flight flight, Passenger passenger, int numSeats) throws Exception {
        flight.bookSeats(numSeats);
        Reservation reservation = new Reservation(flight, passenger, numSeats);
        reservations.add(reservation);
        System.out.println("Reservation made successfully with ID: " + reservation.getReservationId());
    }

    public void viewReservationDetails(int reservationId) {
        for (Reservation reservation : reservations) {
            if (reservation.getReservationId() == reservationId) {
                reservation.displayDetails();
                return;
            }
        }
        System.out.println("Reservation not found with ID: " + reservationId);
    }

    public void viewAllReservations() { // Add this method to display all reservations
        if (reservations.isEmpty()) {
            System.out.println("No reservations found.");
        } else {
            for (Reservation reservation : reservations) {
                reservation.displayDetails();
                System.out.println("-----------");
            }
        }
    }
}



// Main class to run the application
public class AirVoyage {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        List<Admin> admins = new ArrayList<>();
        admins.add(new Admin("Admin1", "admin1@example.com", "1234567890", "admin1", "password1"));

        FlightManager flightManager = new FlightManager();
        ReservationManager reservationManager = new ReservationManager();
        FlightSearch flightSearch = new FlightSearch(flightManager);

        while (true) {
            System.out.println("Welcome to AirVoyage! Are you a:");
            System.out.println("1. Passenger");
            System.out.println("2. Admin");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");
            int userType = scanner.nextInt();
            scanner.nextLine();  // to consume newline

            if (userType == 1) { //1. Passenger
                System.out.print("Enter your name: ");
                String name = scanner.nextLine();
                System.out.print("Enter your email: ");
                String email = scanner.nextLine();
                System.out.print("Enter your phone number: ");
                String phoneNumber = scanner.nextLine();
                Passenger passenger = new Passenger(name, email, phoneNumber);
                boolean exit = false;
                
                while (!exit) {
                    System.out.println("Passenger Menu:");
                    System.out.println("1. View Available Flights");
                    System.out.println("2. Make a Reservation");
                    System.out.println("3. View Reservation Details");
                    System.out.println("4. Exit");
                    System.out.print("Enter your choice: ");
                    int passengerChoice = scanner.nextInt();
                    scanner.nextLine();  // Consume newline
                    
                    
                    switch(passengerChoice) {
                        case 1:
                            // 1. View Available Flights
                            flightSearch.viewAvailableFlights();
                            break;
                        case 2:
                            // 2. Make a Reservation
                            try {
                                System.out.print("Enter the flight number: ");
                                String flightNumber = scanner.nextLine();
                                Flight flight = flightSearch.getFlightByFlightNumber(flightNumber);
                                System.out.print("Enter the number of seats: ");
                                int numSeats = scanner.nextInt();
                                scanner.nextLine();  // Consume newline
                                reservationManager.makeReservation(flight, passenger, numSeats);
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                            }
                            break;
                        case 3:
                            // 3. View Reservation Details
                            System.out.print("Enter the reservation ID: ");
                            int reservationId = scanner.nextInt();
                            scanner.nextLine();  // Consume newline
                            reservationManager.viewReservationDetails(reservationId);
                            break;
                        case 4:
                            // 4. Exit
                            exit = true;
                            break;
                        default:
                            System.out.println("Invalid choice. Please try again.");
                    
                    }

                }
            }
            else if (userType == 2) { // 2. Admin
                System.out.print("Enter your username: ");
                String username = scanner.nextLine();
                System.out.print("Enter your password: ");
                String password = scanner.nextLine();

                boolean authenticated = false;
                Admin loggedInAdmin = null;

                for (Admin admin : admins) {
                    if (admin.getUsername().equals(username) && admin.authenticate(password)) {
                        authenticated = true;
                        loggedInAdmin = admin;
                        break;
                    }
                }

                if (authenticated) {
                    System.out.println("Admin authenticated successfully.");
                    boolean exit = false;
                    while (!exit) {
                        System.out.println("Admin Menu:");
                        System.out.println("1. Add Flight");
                        System.out.println("2. Edit Flight");
                        System.out.println("3. Delete Flight");
                        System.out.println("4. View Reservations");
                        System.out.println("5. Exit");
                        System.out.print("Enter your choice: ");
                        int adminChoice = scanner.nextInt();
                        scanner.nextLine();  // Consume newline

                        switch(adminChoice) {
                            case 1:
                                // 1. Add Flight
                                System.out.print("Enter the airline: ");
                                String airline = scanner.nextLine();
                                System.out.print("Enter the flight number: ");
                                String flightNumber = scanner.nextLine();
                                System.out.print("Enter the departure time: ");
                                String departureTime = scanner.nextLine();
                                System.out.print("Enter the date (YYYY-MM-DD): ");
                                String date = scanner.nextLine(); // Input for date
                                System.out.print("Enter the total number of seats: ");
                                int totalSeats = scanner.nextInt();
                                scanner.nextLine();  // Consume newline
                                flightManager.addFlight(new Flight(airline, flightNumber, departureTime, date, totalSeats)); // Pass date to Flight constructor
                                break;
                            case 2:
                                // 2. Edit Flight
                                System.out.print("Enter the flight number: ");
                                flightNumber = scanner.nextLine();
                                System.out.print("Enter the new departure time: ");
                                String newDepartureTime = scanner.nextLine();
                                System.out.print("Enter the new date (YYYY-MM-DD): ");
                                String newDate = scanner.nextLine(); // Input for new date
                                System.out.print("Enter the new total number of seats: ");
                                int newTotalSeats = scanner.nextInt();
                                scanner.nextLine();  // Consume newline
                                flightManager.editFlight(flightNumber, newDepartureTime, newDate, newTotalSeats); // Pass newDate to editFlight method
                                break;
                            case 3:
                                // 3. Delete Flight
                                System.out.print("Enter the flight number: ");
                                flightNumber = scanner.nextLine();
                                flightManager.deleteFlight(flightNumber);
                                break;
                            case 4:
                                // 4. View Reservations
                                reservationManager.viewAllReservations();
                                break;
                            case 5:
                                // 5. Exit
                                exit = true;
                                break;
                            default:
                                System.out.println("Invalid choice. Please try again.");
                        }
                    }
                } else {
                    System.out.println("Authentication failed. Please try again.");
                }
            } else if (userType == 3) {
                System.out.println("Thank you for using AirVoyage. Goodbye!");
                break;
            } else {
                System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }
}
